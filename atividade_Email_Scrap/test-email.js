require('dotenv').config();
const nodemailer = require('nodemailer');

async function testEmail() {
  console.log('üß™ Testando configura√ß√£o de email...\n');
  
  // Mostrar configura√ß√µes (sem mostrar a senha)
  console.log('Configura√ß√µes:');
  console.log(`Host: ${process.env.EMAIL_HOST}`);
  console.log(`Port: ${process.env.EMAIL_PORT}`);
  console.log(`User: ${process.env.EMAIL_USER}`);
  console.log(`From: ${process.env.EMAIL_FROM}`);
  console.log(`To: ${process.env.EMAIL_TO}`);
  console.log(`Pass: ${'*'.repeat(process.env.EMAIL_PASS?.length || 0)}\n`);

  // Criar transporter
  const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT),
    secure: false, // true para 465, false para outros ports
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });

  try {
    // Testar conex√£o
    console.log('üîó Testando conex√£o SMTP...');
    await transporter.verify();
    console.log('‚úÖ Conex√£o SMTP OK!\n');

    // Enviar email de teste
    console.log('üì§ Enviando email de teste...');
    const info = await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: process.env.EMAIL_TO,
      subject: 'üß™ Teste de Configura√ß√£o - Web Scraper',
      html: `
        <h2>‚úÖ Configura√ß√£o funcionando!</h2>
        <p>Se voc√™ recebeu este email, sua configura√ß√£o est√° correta.</p>
        <p><strong>Data:</strong> ${new Date().toLocaleString('pt-BR')}</p>
        <p><strong>Host:</strong> ${process.env.EMAIL_HOST}</p>
        <hr>
        <small>Este √© um email de teste do seu Web Scraper</small>
      `,
      text: `
        ‚úÖ Configura√ß√£o funcionando!
        
        Se voc√™ recebeu este email, sua configura√ß√£o est√° correta.
        Data: ${new Date().toLocaleString('pt-BR')}
        Host: ${process.env.EMAIL_HOST}
      `
    });

    console.log('‚úÖ Email enviado com sucesso!');
    console.log(`üìß Message ID: ${info.messageId}`);
    console.log('\nüéâ Sua configura√ß√£o est√° funcionando perfeitamente!');

  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:');
    console.error(`Tipo: ${error.code || 'UNKNOWN'}`);
    console.error(`Mensagem: ${error.message}`);
    
    // Dicas baseadas no erro
    if (error.code === 'EAUTH') {
      console.log('\nüí° Dicas para resolver:');
      console.log('‚Ä¢ Verifique se est√° usando senha de app (n√£o a senha normal)');
      console.log('‚Ä¢ Confirme se a autentica√ß√£o 2FA est√° ativa no Gmail');
      console.log('‚Ä¢ Teste com uma nova senha de app');
    } else if (error.code === 'ECONNECTION') {
      console.log('\nüí° Dicas para resolver:');
      console.log('‚Ä¢ Verifique sua conex√£o com internet');
      console.log('‚Ä¢ Confirme o host e porta SMTP');
      console.log('‚Ä¢ Teste com outro provedor de email');
    }
  }
}

// Verificar se as vari√°veis est√£o configuradas
const requiredVars = ['EMAIL_HOST', 'EMAIL_USER', 'EMAIL_PASS', 'EMAIL_FROM', 'EMAIL_TO'];
const missingVars = requiredVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas:');
  missingVars.forEach(varName => console.error(`‚Ä¢ ${varName}`));
  console.log('\nüìù Configure essas vari√°veis no arquivo .env');
  process.exit(1);
}

testEmail();